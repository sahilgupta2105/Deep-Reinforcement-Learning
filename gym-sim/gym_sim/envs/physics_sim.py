# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_physics_sim')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_physics_sim')
    _physics_sim = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_physics_sim', [dirname(__file__)])
        except ImportError:
            import _physics_sim
            return _physics_sim
        try:
            _mod = imp.load_module('_physics_sim', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _physics_sim = swig_import_helper()
    del swig_import_helper
else:
    import _physics_sim
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _physics_sim.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _physics_sim.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _physics_sim.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _physics_sim.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _physics_sim.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _physics_sim.SwigPyIterator_equal(self, x)

    def copy(self):
        return _physics_sim.SwigPyIterator_copy(self)

    def next(self):
        return _physics_sim.SwigPyIterator_next(self)

    def __next__(self):
        return _physics_sim.SwigPyIterator___next__(self)

    def previous(self):
        return _physics_sim.SwigPyIterator_previous(self)

    def advance(self, n):
        return _physics_sim.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _physics_sim.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _physics_sim.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _physics_sim.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _physics_sim.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _physics_sim.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _physics_sim.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _physics_sim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _physics_sim.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _physics_sim.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _physics_sim.VectorDouble___bool__(self)

    def __len__(self):
        return _physics_sim.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _physics_sim.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _physics_sim.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _physics_sim.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _physics_sim.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _physics_sim.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _physics_sim.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _physics_sim.VectorDouble_pop(self)

    def append(self, x):
        return _physics_sim.VectorDouble_append(self, x)

    def empty(self):
        return _physics_sim.VectorDouble_empty(self)

    def size(self):
        return _physics_sim.VectorDouble_size(self)

    def swap(self, v):
        return _physics_sim.VectorDouble_swap(self, v)

    def begin(self):
        return _physics_sim.VectorDouble_begin(self)

    def end(self):
        return _physics_sim.VectorDouble_end(self)

    def rbegin(self):
        return _physics_sim.VectorDouble_rbegin(self)

    def rend(self):
        return _physics_sim.VectorDouble_rend(self)

    def clear(self):
        return _physics_sim.VectorDouble_clear(self)

    def get_allocator(self):
        return _physics_sim.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _physics_sim.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _physics_sim.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _physics_sim.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _physics_sim.VectorDouble_push_back(self, x)

    def front(self):
        return _physics_sim.VectorDouble_front(self)

    def back(self):
        return _physics_sim.VectorDouble_back(self)

    def assign(self, n, x):
        return _physics_sim.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _physics_sim.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _physics_sim.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _physics_sim.VectorDouble_reserve(self, n)

    def capacity(self):
        return _physics_sim.VectorDouble_capacity(self)
    __swig_destroy__ = _physics_sim.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _physics_sim.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class ScalarF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarF, name)
    __repr__ = _swig_repr

    def __init__(self, nX, nY, h):
        this = _physics_sim.new_ScalarF(nX, nY, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _physics_sim.delete_ScalarF
    __del__ = lambda self: None

    def nX(self):
        return _physics_sim.ScalarF_nX(self)

    def nY(self):
        return _physics_sim.ScalarF_nY(self)

    def __call__(self, *args):
        return _physics_sim.ScalarF___call__(self, *args)

    def update_field_val_at(self, arg2, arg3, arg4):
        return _physics_sim.ScalarF_update_field_val_at(self, arg2, arg3, arg4)

    def field_total(self):
        return _physics_sim.ScalarF_field_total(self)

    def assign_field(self, arg2):
        return _physics_sim.ScalarF_assign_field(self, arg2)

    def field_data(self):
        return _physics_sim.ScalarF_field_data(self)

    def size(self):
        return _physics_sim.ScalarF_size(self)
ScalarF_swigregister = _physics_sim.ScalarF_swigregister
ScalarF_swigregister(ScalarF)

class Circle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Circle, name)
    __repr__ = _swig_repr

    def __init__(self, r):
        this = _physics_sim.new_Circle(r)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def is_inside(self, arg2):
        return _physics_sim.Circle_is_inside(self, arg2)

    def get_signed_dist(self, arg2):
        return _physics_sim.Circle_get_signed_dist(self, arg2)

    def project_out(self, arg2):
        return _physics_sim.Circle_project_out(self, arg2)

    def get_mass(self, arg2):
        return _physics_sim.Circle_get_mass(self, arg2)

    def get_inertia(self, arg2, arg3):
        return _physics_sim.Circle_get_inertia(self, arg2, arg3)

    def get_vertices(self, arg2):
        return _physics_sim.Circle_get_vertices(self, arg2)
    __swig_destroy__ = _physics_sim.delete_Circle
    __del__ = lambda self: None
Circle_swigregister = _physics_sim.Circle_swigregister
Circle_swigregister(Circle)

class RigidBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RigidBody, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        this = _physics_sim.new_RigidBody(arg2, arg3)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getWorldInvInertia(self, arg2):
        return _physics_sim.RigidBody_getWorldInvInertia(self, arg2)

    def getCoordFrame(self):
        return _physics_sim.RigidBody_getCoordFrame(self)

    def setCoordFrame(self, arg2):
        return _physics_sim.RigidBody_setCoordFrame(self, arg2)

    def getMass(self):
        return _physics_sim.RigidBody_getMass(self)

    def getDensity(self):
        return _physics_sim.RigidBody_getDensity(self)

    def getInertiaModulus(self):
        return _physics_sim.RigidBody_getInertiaModulus(self)

    def getInvInertiaModulus(self):
        return _physics_sim.RigidBody_getInvInertiaModulus(self)

    def getCOM(self, arg2):
        return _physics_sim.RigidBody_getCOM(self, arg2)

    def setCOM(self, arg2):
        return _physics_sim.RigidBody_setCOM(self, arg2)

    def getAngle(self):
        return _physics_sim.RigidBody_getAngle(self)

    def setAngle(self, arg2):
        return _physics_sim.RigidBody_setAngle(self, arg2)

    def getLinearVelocity(self, arg2):
        return _physics_sim.RigidBody_getLinearVelocity(self, arg2)

    def setLinearVelocity(self, arg2):
        return _physics_sim.RigidBody_setLinearVelocity(self, arg2)

    def getAngularMomentum(self, arg2):
        return _physics_sim.RigidBody_getAngularMomentum(self, arg2)

    def setAngularMomentum(self, arg2):
        return _physics_sim.RigidBody_setAngularMomentum(self, arg2)

    def getPointVelocity(self, arg2):
        return _physics_sim.RigidBody_getPointVelocity(self, arg2)

    def isInside(self, arg2):
        return _physics_sim.RigidBody_isInside(self, arg2)

    def testCollisionAndProject(self, arg2, arg3):
        return _physics_sim.RigidBody_testCollisionAndProject(self, arg2, arg3)

    def getSignedDist(self, arg2):
        return _physics_sim.RigidBody_getSignedDist(self, arg2)

    def getVertices(self, arg2):
        return _physics_sim.RigidBody_getVertices(self, arg2)

    def advance(self, arg2):
        return _physics_sim.RigidBody_advance(self, arg2)

    def updatePosition(self, arg2):
        return _physics_sim.RigidBody_updatePosition(self, arg2)

    def updateOrientation(self, arg2):
        return _physics_sim.RigidBody_updateOrientation(self, arg2)

    def applyForce(self, arg2, arg3):
        return _physics_sim.RigidBody_applyForce(self, arg2, arg3)

    def applyTorque(self, arg2, arg3):
        return _physics_sim.RigidBody_applyTorque(self, arg2, arg3)

    def getAngularVelocity(self, arg2):
        return _physics_sim.RigidBody_getAngularVelocity(self, arg2)
    __swig_destroy__ = _physics_sim.delete_RigidBody
    __del__ = lambda self: None
RigidBody_swigregister = _physics_sim.RigidBody_swigregister
RigidBody_swigregister(RigidBody)

class MAC_Grid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAC_Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAC_Grid, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4):
        this = _physics_sim.new_MAC_Grid(arg2, arg3, arg4)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _physics_sim.delete_MAC_Grid
    __del__ = lambda self: None

    def velocity(self, arg2):
        return _physics_sim.MAC_Grid_velocity(self, arg2)

    def getU(self):
        return _physics_sim.MAC_Grid_getU(self)

    def getV(self):
        return _physics_sim.MAC_Grid_getV(self)

    def modifyU(self):
        return _physics_sim.MAC_Grid_modifyU(self)

    def modifyV(self):
        return _physics_sim.MAC_Grid_modifyV(self)

    def boundary_phi(self, arg2, arg3):
        return _physics_sim.MAC_Grid_boundary_phi(self, arg2, arg3)

    def update_rigid_body_properties(self, arg2):
        return _physics_sim.MAC_Grid_update_rigid_body_properties(self, arg2)

    def update_fluid_properties(self, arg2, arg3):
        return _physics_sim.MAC_Grid_update_fluid_properties(self, arg2, arg3)

    def advect_fluid_on_MAC(self, arg2):
        return _physics_sim.MAC_Grid_advect_fluid_on_MAC(self, arg2)

    def force_on_fluid_MAC(self, arg2):
        return _physics_sim.MAC_Grid_force_on_fluid_MAC(self, arg2)

    def apply_projection(self, arg2, arg3):
        return _physics_sim.MAC_Grid_apply_projection(self, arg2, arg3)

    def extrapolate_velocities(self):
        return _physics_sim.MAC_Grid_extrapolate_velocities(self)

    def recompute_boundary_velocity(self, arg2):
        return _physics_sim.MAC_Grid_recompute_boundary_velocity(self, arg2)

    def constrain_velocity(self):
        return _physics_sim.MAC_Grid_constrain_velocity(self)

    def process_collisions_rigid_boundary(self, arg2):
        return _physics_sim.MAC_Grid_process_collisions_rigid_boundary(self, arg2)

    def enforce_controller_bc(self, arg2, arg3, arg4, arg5):
        return _physics_sim.MAC_Grid_enforce_controller_bc(self, arg2, arg3, arg4, arg5)

    def sample_velocity_to_file(self, arg2):
        return _physics_sim.MAC_Grid_sample_velocity_to_file(self, arg2)
MAC_Grid_swigregister = _physics_sim.MAC_Grid_swigregister
MAC_Grid_swigregister(MAC_Grid)
cvar = _physics_sim.cvar
VERBOSE = cvar.VERBOSE


def Hash(seed):
    return _physics_sim.Hash(seed)
Hash = _physics_sim.Hash

def IndexRand(size, seed):
    return _physics_sim.IndexRand(size, seed)
IndexRand = _physics_sim.IndexRand

def ThrowIfInvalidMaxSampleAttempts(max_sample_attempts):
    return _physics_sim.ThrowIfInvalidMaxSampleAttempts(max_sample_attempts)
ThrowIfInvalidMaxSampleAttempts = _physics_sim.ThrowIfInvalidMaxSampleAttempts
class Simulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Simulator, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5):
        this = _physics_sim.new_Simulator(arg2, arg3, arg4, arg5)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _physics_sim.delete_Simulator
    __del__ = lambda self: None

    def advance(self, arg2, arg3):
        return _physics_sim.Simulator_advance(self, arg2, arg3)

    def reset_simulator(self):
        return _physics_sim.Simulator_reset_simulator(self)

    def sample_velocity(self):
        return _physics_sim.Simulator_sample_velocity(self)

    def write_to_file(self):
        return _physics_sim.Simulator_write_to_file(self)
Simulator_swigregister = _physics_sim.Simulator_swigregister
Simulator_swigregister(Simulator)

# This file is compatible with both classic and new-style classes.


